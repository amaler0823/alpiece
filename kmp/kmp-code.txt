package alpiece.example;

/*简述：内重增效异重。缩：重重*/

public class StrContainsKmp {
    public static boolean contains(String s, String p) {
        int ls = s.length(), lp = p.length(), i = 0, j = 0;
        int[] next = new int[lp];
        getPPPNextArray(p, next);//获取关于模式串p的next数组
		/*amaler -1 0 0 1 0 0*/
        while(i < ls && j < lp) {/*j < lp  保证了全匹配即退出*/
			/*匹配*//*有异重*/
            if(s.charAt(i) == p.charAt(j)) {
                ++i;
                ++j;
            }
			
			
			/*不匹配*//*无异重*/
			/*
            如果模式串p的第一个字符p[0]和字符串s的当前字符s[i]都不匹配，
            那么说明s中从i开始不可能匹配出p来，因此换下一个开头继续尝试
            */
			/*下移一步s*/
			else if(j == 0) {
				++i;
			}
				
				
			/*不匹配*//*无异重*/
            /*
			
            否则j位置不是0，虽然说明它前面有匹配成功的部分，
            但此时j应该调整为next[j]的新位置（一般前置）
            */
			/*只匹配到半路，p归位（一般前置）*/
            else { 
				j = next[j];
			}
			
        }
        return j == lp;
    }

	/*将模式转换为内重复指引整数数组*/
    private static void getPPPNextArray(String p, int[] next) {
        int len = p.length();
        next[0] = -100;
        if(len == 1) return;
        next[1] = 0;

        //i: 纯递增，整数数组next[i]
		//cn: 分段的判断砝码

        int i = 2, cn = next[i - 1];
		
		
		/*！！！！！！*/
		/*参考上面contains的注释*/
        while(i < len) {
			/*匹配*//*有内重*/
            if(p.charAt(i - 1) == p.charAt(cn)){
                next[i++] = ++cn;//置next为+1
            }
			
			
			/*不匹配*//*无内重*//*开头*/
            else if(cn == 0) {
                next[i++] = 0;//置next为0，i再+1
            }
			
			
			/*不匹配*//*无内重（一般cn前置）*/
            else {
                cn = next[cn];//不置next
            }
        }
		/*以amaler为例*/
        /*-1*//*0*/
        /*i==2，cn==0*//*0*/
        /*i==3，cn==0*//*1*/
		/*i==4，cn==1*//*回置cn，不长i*/
		/*i==4，cn==0*//*0*/
		/*i==5，cn==0*//*0*/
		/*i==6，cn==0*/
    }

    public static void main(String[] args) {
        /*
        *
        *
        * */
        String a = "amamaxamalerwood";
        String b = "amaler";

        System.out.println(contains(a,b));

    }
}
